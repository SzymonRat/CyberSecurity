Software vulnerability management life cycle

1.Know when new software vulnerabilities affect your organization’s assets, including
applications, operating systems, and firmware. This involves knowing what assets
your organization uses and which software and software versions those assets run down
to the level of packages and libraries, as well as keeping track of new vulnerabilities in
that software.

2.Plan the risk response. This involves assessing the risk the vulnerability poses to your
organization, choosing which form of risk response (or combination of forms) to use, and
deciding how to implement the risk response. The avilalbe forms of the risk response are:
              
              a)Accept: Accept the risk from vulnerable software as is, such as by relying on existing
security controls to prevent vulnerability exploitation or by determining that the potential
impact is low enough that no additional action is needed.

              b)Mitigate: Reduce the risk by eliminating the vulnerabilities (e.g., patching the vulnerable
software, disabling a vulnerable feature, or upgrading to a newer software version
without the vulnerabilities) and/or deploying additional security controls to reduce
vulnerability exploitation (e.g., using firewalls and network segmentation to isolate
vulnerable assets, thus reducing the attack surface). The following patch scenarios can be distinguished:
           
                          - Routine patching. This is the standard procedure for patches that are on a regular release
cycle and have not been elevated to emergency status. Most patching falls under this
scenario. However, because routine patching does not have the urgency of emergency
scenarios, and routine patch installation can interrupt operations (e.g., device reboots), it
is often postponed and neglected. This provides many additional windows of opportunity
for attackers. Delaying routine patching also makes emergency patching more difficult,
time-consuming, and disruptive because of the need to first install previous patches that
new patches depend upon
      
                           - Emergency patching. This is the procedure to address patching emergencies in a crisis
situation, such as a severe vulnerability or a vulnerability being actively exploited. If one
or more of the organization’s vulnerable assets have already been compromised,
emergency patching may be part of incident response efforts. Emergency patching needs
to be handled as efficiently as possible to prevent the imminent exploitation of vulnerable
assets.

                           - Emergency mitigation. This is the emergency procedure in a crisis situation, like those
described above for the emergency patching scenario, to temporarily mitigate
vulnerabilities before a patch is available. The mitigation can vary and may or may not
need to be rolled back afterward. Emergency mitigations are sometimes needed because
of issues with a patch. For example, a patch might be flawed and not actually correct a
vulnerability, or a patch might inadvertently disrupt the operation of other software or
systems. A patch could even be compromised.

                             -Unpatchable assets. This is the implementation of isolation or other methods to mitigate
the risk of systems that cannot be easily patched. This is typically required if routine
patching is not able to accommodate these systems within a reasonable time frame.
Examples of why an asset may be unpatchable include the vendor not providing patches
(e.g., asset is at end-of-life, asset does not support updates) or an asset needing to run
uninterrupted for an extended period of time because it provides mission-critical
functions. Unpatchable assets need to be included in risk response planning because a
new vulnerability in an asset might necessitate a change in the methods needed to
mitigate its risk. 
               

              c)Transfer: Reduce the risk by sharing some of the consequences with another party, such
as by purchasing cybersecurity insurance or by replacing conventional software
installations with software-as-a-service (SaaS) usage where the SaaS vendor/managed
service provider takes care of patching.

              d)Avoid: Ensure that the risk does not occur by eliminating the attack surface, such as by
uninstalling the vulnerable software, decommissioning assets with the vulnerabilities, or
disabling computing capabilities in assets that can function without them.

3. Execute the risk response. This will vary depending on the nature of the selected risk
response, but common phases include the following:

              a)Prepare the risk response - This encompasses any preparatory activities, such as:
              
                 - Prioritize the patch. A patch may be a higher priority to deploy than others because its
deployment would reduce cybersecurity risk more than other patches would. Another
patch may be a lower priority because it addresses a low-risk vulnerability on a small
number of low-importance assets.

                  -Schedule patch deployment. Many organizations schedule patch deployments as part of
their enterprise change management activities.

                  -Acquire the patch. Patches may be downloaded from the internet, built internally by
developers or system administrators, or provided through removable media.

                   -Validate the patch. A patch’s authenticity and integrity should be confirmed, preferably
by automated means, before the patch is tested or installed. The patch could have been
acquired from a rogue source or tampered with in transit or after acquisition.
 
                    -Test the patch. A patch may be tested before deployment. This is intended to reduce
operational risk by identifying problems with a patch before placing it into production.
Testing may be performed manually or through automated methods

              b)Implement the risk response. - at a high level, examples of common steps for deploying a patch include the following:
              
                   -Distribute the patch. Distributing the patch to the assets that need to have it installed can
be organization-controlled (and occur automatically, manually, or as scheduled) or
vendor-controlled, such as delivered from the cloud.

                   -Validate the patch.

                   -Install the patch. Installation can occur in numerous ways, including automatically;
manually when directed to do so by a user, administrator, vendor, or tool; as a result of
other software being installed or updated; and through the replacement of removable
media used by an asset. Some installations require administrator privileges, such as
installing firmware patches for a system basic input/output system (BIOS).

                    -Change software configuration and state. In some cases, making a patch take effect
necessitates implementing changes. Examples include restarting patched software,
rebooting the operating system or platform on which the patched software runs,
redeploying the applications, or altering software configuration settings. In other cases,
no such changes are needed.

                     -Resolve any issues. Installing a patch may cause side effects to occur, like inadvertently
altering existing security configuration settings or adding new settings, and these side
effects can inadvertently create a new security problem while fixing the original one.
Patch installation can also cause operational issues that may necessitate uninstalling the
patch, reverting to the previous version of the software, or restoring the software or asset
from backups.            

              
              c)Verify the risk response. This step involves ensuring that the implementation has
been completed successfully. For patching, this means confirming that the patch
is installed and has taken effect. For deploying additional security controls, ensure
they are functioning as intended. For risk avoidance, verify that vulnerable assets
were decommissioned or replaced.

              d)Continuously monitor the risk response. Make sure that the risk response
continues to be in place: no one uninstalls the patch, deactivates the additional
security controls, lets the cybersecurity insurance lapse, or restarts the
decommissioned asset.


In addition, there are administrative activities occurring throughout the software vulnerability
management life cycle, such as updating documentation, audit logging, and generating actionable
insights and reports as part of enterprise change management. Having robust change
management policies and processes in place is a fundamental part of software vulnerability
management.


  Recommendations that organizations should implement to improve their
enterprise patch management planning, thereby minimizing the potential negatives of patching to
operations:

1. Organizations should strive to decrease the number of vulnerabilities introduced into their
environments. Possible methods for decreasing the number of vulnerabilities include:

   • Harden software, such as enforcing the principles of least privilege and least functionality
(e.g., deactivating or uninstalling software services, features, and other components that
are not needed).

   • Acquire software that is likely to have fewer vulnerabilities over time compared to other
software.

   • Work with software development partners that are likely to introduce fewer
vulnerabilities into software over time, taking into consideration factors such as how
rigorous their secure software development practices are, how quickly they address issues
and release patches, how often problems are associated with their patches, and how
transparent they are in their security-related communications.

   • Use managed services instead of software when feasible.
   
   • Select stacks or platforms that are likely to have fewer vulnerabilities over time compared
to other stacks or platforms (e.g., running software within a small container instead of a
larger operating system).


2.Organizations should consider deploying applications in ways that make patching less
likely to disrupt operations

3. Organizations should establish and constantly maintain up-to-date software inventories for
their physical and virtual computing assets, including OT, IoT, and container assets

4. Software inventories should include information on each computing asset’s technical characteristics and
mission/business characteristics

5. Organizations should define the software vulnerability risk response scenarios they need to
be prepared to handle. Examples of such scenarios include:




