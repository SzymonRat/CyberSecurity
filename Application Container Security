Operating system (OS) virtualization provides a separate virtualized view of the OS to each
application, thereby keeping each application isolated from all others on the server. Each
application can only see and affect itself. Recently, OS virtualization has become increasingly
popular due to advances in its ease of use and a greater focus on developer agility as a key
benefit. Today’s OS virtualization technologies are primarily focused on providing a portable,
reusable, and automatable way to package and run applications

The following methoda can help increase a security of the application containers:

1. Tailor the organization’s operational culture and technical processes to support the new
way of developing, running, and supporting applications made possible by containers

2. Use container-specific host OSs instead of general-purpose ones to reduce attack surfaces.

      A container-specific host OS is a minimalist OS explicitly designed to only run containers, with
all other services and functionality disabled, and with read-only file systems and other hardening
practices employed. When using a container-specific host OS, attack surfaces are typically much
smaller than they would be with a general-purpose host OS, so there are fewer opportunities to
attack and compromise a container-specific host OS.

3. Only group containers with the same purpose, sensitivity, and threat posture on a single
host OS kernel to allow for additional defense in depth.

      While most container platforms do an effective job of isolating containers from each other and
from the host OS, it may be an unnecessary risk to run apps of different sensitivity levels
together on the same host OS. Segmenting containers by purpose, sensitivity, and threat posture
provides additional defense in depth. By grouping containers in this manner, organizations make
it more difficult for an attacker who compromises one of the groups to expand that compromise
to other groups. This increases the likelihood that compromises will be detected and contained
and also ensures that any residual data, such as caches or local volumes mounted for temp files,
stays within its security zone.
In larger-scale environments with hundreds of hosts and thousands of containers, this grouping
must be automated to be practical to operationalize. Fortunately, container technologies typically
include some notion of being able to group apps together, and container security tools can use
attributes like container names and labels to enforce security policies across them.

4. Adopt container-specific vulnerability management tools and processes for images to
prevent compromises

 Organizations should adopt tools and processes to validate and enforce
compliance with secure configuration best practices for images. This should include having
centralized reporting and monitoring of the compliance state of each image, and preventing noncompliant images from being run.

5. Consider using hardware-based countermeasures to provide a basis for trusted computing

6. Use container-aware runtime defense tool

    Deploy and use a dedicated container security solution capable of preventing, detecting, and
responding to threats aimed at containers during runtime. Traditional security solutions, such as
intrusion prevention systems (IPSs) and web application firewalls (WAFs), often do not provide
suitable protection for containers. They may not be able to operate at the scale of containers,
manage the rate of change in a container environment, and have visibility into container activity.
Utilize a container-native security solution that can monitor the container environment and
provide precise detection of anomalous and malicious activity within it.

======================================================================================

Every host OS used for running containers has binaries that establish and maintain the
environment for each container, also known as the container runtime. The container runtime
coordinates multiple OS components that isolate resources and resource usage so that each
container sees its own dedicated view of the OS and is isolated from other containers running
concurrently. Effectively, the containers and the host OS interact through the container runtime.
The container runtime also provides management tools and application programming interfaces
(APIs) to allow DevOps personnel and others to specify how to run containers on a given host.
The runtime eliminates the need to manually create all the necessary configurations and
simplifies the process of starting, stopping, and operating containers. Examples of runtimes
include Docker , rkt , and the Open Container Initiative Daemon 

Examples of technical capabilities the container runtime ensures the host OS provides include
the following:

 1. Namespace isolation
 
 2. Resource allocation
 
 3. Filesystem virtualization
 
 
================================================================================================

Major risk for core components for container technologies:

1. Image vulnerabilities
  
     Because images are effectively static archive files that include all the components used to run a
given app, components within an image may be missing critical security updates or are otherwise
outdated.

2. Image configuration defects

3. Embedded malware

4. Embedded clear text secrets

5. Use od untrusted images

6. Insecure connections to regsitries

7. Insufficient authentication & authorization restrictions

8. Orchestrator configuration defects

9. Host OS file system tempering

10. Improper user access rights

11. Host OS component vulnerabilities

12. Shared kernel

13. Rogue containers

14. App vulnerabilities

15. Insecure container runtime configuration

16. Unbound network access from containers

17. Orchestrator Node trust

18. Mixing of workload sensitivity

19. Poorly separated inter-container traffic

20. Unauthorized access

21. Unbound administrative access
=============================================================

Container Threat Scenario

a) Exploit of a Vulnerability within the image

One of the most common threats to a containerized environment is application-level
vulnerabilities in the software within containers. For example, an organization may build an
image based on a common web app. If that app has a vulnerability, it may be used to subvert the
app within the container. Once compromised, the attacker may be able to map other systems in
the environment, attempt to elevate privileges within the compromised container, or abuse the
container for use in attacks on other systems (such as acting as a file dropper or command and
control endpoint).

Organizations that adopt the recommended countermeasures would have multiple layers of
defense in depth against such threats:

1. Detecting the vulnerable image early in the deployment process and having controls in
place to prevent vulnerable images from being deployed would prevent the vulnerability
from being introduced into production.

2. Container-aware network monitoring and filtering would detect anomalous connections
to other containers during the attempt to map other systems.

3. Container-aware process monitoring and malware detection would detect the running of
invalid or unexpected malicious processes and the data they introduce into the
environment.


b) Exploit of the container runtime

While an uncommon occurrence, if a container runtime were compromised, an attacker could
utilize this access to attack all the containers on the host and even the host itself.
Relevant mitigations for this threat scenario include:

1. The usage of mandatory access control capabilities can provide additional barriers to
ensure that process and file system activity is still segmented within the defined
boundaries.

2. Segmentation of workloads ensures that the scope of the compromise would be limited to
apps of a common sensitivity level that are sharing the host. For example, a compromised
runtime on a host only running web apps would not impact runtimes on other hosts
running containers for financial apps.

3. Security tools that can report on the vulnerability state of runtimes and prevent the
deployment of images to vulnerable runtimes can prevent workloads from running there.


c) Running a poisoned image

Because images are easily sourced from public locations, often with unknown provenance, an
attacker may embed malicious software within images known to be used by a target. For
example, if an attacker determines that a target is active on a discussion board about a particular
project and uses images provided by that project’s web site, the attacker may seek to craft
malicious versions of these images for use in an attack.
Relevant mitigations include:

1. Ensuring that only vetted, tested, validated, and digitally signed images are allowed to be
uploaded to an organization’s registries.

2. Ensuring that only trusted images are allowed to run, which will prevent images from
external, unvetted sources from being used.

3. Automatically scanning images for vulnerabilities and malware, which may detect
malicious code such as rootkits embedded within an image.

4. Implementing runtime controls that limit the container's ability to abuse resources,
escalate privileges, and run executables.

5. Using container-level network segmentation to limit the “blast radius” of what the
poisoned image might do.

6. Validating a container runtime operates following least-privilege and least-access
principles.

7. Building a threat profile of the container's runtime. This includes, but is not limited to,
processes, network calls, and filesystem changes.

8. Validating the integrity of images before runtime by leveraging hashes and digital
signatures.

9. Restrict images from being run based on rules establishing acceptable vulnerability
severity levels. For example, prevent images with vulnerabilities that have a Moderate or
higher CVSS rating from being run.

======================================================================================

Container LIfecycle Security COnsiderations

















