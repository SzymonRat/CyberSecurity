
========================================Definitions============================================================
   
Customers (acquiring organizations) may use this guidance for assessing, and
measuring security practices relative to the software lifecycle as well as for
acquisition, deployment, and operational phases of a software supply chain.

Vendor (software supplier) is responsible for liaising between the customer and software
developer. Accordingly, vendor responsibilities include ensuring the integrity and security of
software via contractual agreements, software releases and updates, notifications, and mitigations
of vulnerabilities.

=======================================Definitions===========================================================

A supplier acts as a liaison or intermediary between the developer and a customer and as such retains
primary responsibilities for the following:

1. Maintaining the integrity of the securely delivered sofftware

2. Validating software packages and updates

3. Mintaining awerness of known vulnerabilities

4. Accept cutomer reports of issues or newly discovered vulnerabilities  and notifing 
developers for remediations

Policies should be established and implemented that specify checks required to securly 
deliver software. These policies should be accessible and knnownby everyone who has a role in 
software development life cycle (SDLC) and should include:
   - notifing customers of vulnerabilities
   - mechanisms used for the mitigations
   - End-of-life support (EOL)
   
   
   The following mitigations can help reduce threats and risks associated with the deployment process:
   
    1. Verify if the software shipped is the same as the received
    
    2. Create fully signed images and binary code
    
    3. Ensure the secure hash to validate the binary
    
    4. Establish that communication channel is secure
    
    5. Establish a secure process for updates ad pataches
    
    
All forms of code should be protected from unauthorized access and tampering and the principle of least privileges
should be applied throught the SDLC. This is a key in ensuring that code delivered to the customers includes all
required security features and that those features are working as designed.

The following mitigrations can help reduce risks associated with the integrity of the software code:

    1. Enforce role-based-access-control with segmentation of duties and least privileges
    
    2. Identify and vet trusted architectes, developers, testers and the documentation personnel
    with the required skills necessary to complete the project
    
    3. Assign individuals to one or more design, coding or quality assurance tasks based on their
    capabilities or interests and register their privileges for the corrseponding project roles
    in a secure access control system
    
    4. Verify each assigned individual's corporate-issued development system conforms to all
    company security standards, including full disk encryption, minimum password complexity,
    patch management, antivirus and intrusion detection system
    
    5. Ensure that code repository, build and test environments have at least the same security
    protections as other critical network capabilities such as network segmentation, firewalling,
    monitoring, automated encryption and remote backups
    
    6. Ensure the use of multi-factor authentication (MFA) or continous authentication
    based on the behaviour analytics and virtual private network (VPN)
    
    7. Conduct regular reviews of the third  party software
    
    8. Establish a strong security culture in the development and operation support teams
    
    
    Suppliers should provide a mechanism for veryfing software release integrity by digitally 
    signing the code throughout the software life cycle. Digitally signed code enables recipents
    to positively verify and trust the provenance and integrity of the code
    
  The following mitigations can help reduct risks assocaited with the integrity of software releases:
  
    1. Digitally signed code
    
    2. Establish and implment a procedure for key management
    
    3. Include signature validation in the list of security checks
    
    
    Organizations should have an archivial strategy that allows the organization to specify
    major and minor releases. Archived software releases can be used for disaster recovery 
    as well as for forensic investigations. By moving released software to an archived stated
    what is typically a lower cost storage area, the organization can save money and allocate 
    faster storage for more critical software projects. This process can also speed up 
    the productivity by reducing the time it takes for the employees to open files
    under development and to access the associated metadata.
    
    The following mitigations can help reduce risks assocaited with moving software to archive:
    
       1. Establishing repositoried with appropriate access control
       
       2. Ensure the code and executable are maintained
       
       3. Ensure that archived software is only in read-only mode
    
    
    Whether the build process is "full" or "incremental" dictates whether it is performed 
    using the "never seen" or "last build state". Full builds check for dependencies, compile
    all the source files, build all the parts in order and assemble them into artifcats.
    
    In an instance of incremental build, the build checks and comapres the source and other files
    that depend on the target for modifications since the last build. If a modifications exists
    the target will rebuild, otherwise the file from the last build will be reused
    
     The following mitigations can help reduce risk assocaited with software compilation and build
processes

   1. Organizations should establish and maintain a trusted toolchain for all tools involved in the
compilation and building of software; these tools should be configured to a known secure
baseline state, recorded, and tracked via an inventory maintained in a Configuration
Management Database, continuously monitored for emergent security vulnerabilities, and
receive appropriate security updates in accordance with defined remediation timelines.

2. All build processes should be automated and the resulting scripts and metadata should be
stored securely in a version control system with access limited to the individuals
responsible for building the components.

3. Non-interactive service accounts should be used to invoke automated build processes to
ensure build outputs are service-generated and non-falsifiable.

4. The authentication credentials of service accounts which execute automated compilation
and packaging processes should be verified using an approved method to validate the
processes as trusted.

5. Automated build processes should execute in an ephemeral environment which is logically
isolated and free from external influence.

6. Automated build processes should generate and maintain a build manifest identifying
builder, sources, entry point, and parameters to ensure build reproducibility.
    
7. Secure compiler settings should be enabled to help prevent or limit the effectiveness of
some types of security issues, most notably buffer overflows (both stack and heap-based).
Examples of secure compiler settings may include, but are not limited to, the following:
       
       a) Enable stripping of symbols from binary output,
       b) Enable data execution prevention,
       c) Enable safe structured exception handling,
       d) Runtime checks for security,
       e) Enable address space layout randomization,
       f) Emit an error if an array index can be determined at compile time to be out of
bounds,
       g) Emit a warning upon the detection of a suspicious use of an address pointer
       
   
   
   Customers are sometime anxious to quickly install software and may occasionally use it
   an operational environment without completing proper configuration or before configuration
   options are fully understood
   
   The following mitigations can help reduct risks assocaited with insecure configuration:
  
  1. Require that all adminstrative changes/configurations occure over local or securly-enrypted remote connection
  
  2. Locally log adminstrative actions
  
  3. Provide only one default administrative account and don't provide ant default user accounts or accesses
  
  4. Require to change default administrative password after the first login
  
  5. Require all adminstrative account credentials be sufficiently complex and if possivle with "FA
  
  6. Password recovery procedure must require console or phisical access
       
      
      
   Supplliers should make every effort to ensure that publicly known or easily identified vulnerabilities 
   are not in any software provided to customers. Testing for, understanding and removing vulenrabilities 
   in software is required to help prevent supplying code that can be readily compromised, before devliering 
   the software to the customers
       
       
   =========================================================================================================
   
   Developer group dependencies
   
   1. Dependencies/artifacts recommended to be provided by the supplier  for the benefit of the developer:
       - issues from customers
       - hashes
       - SDLC policies and procedures
       - Secure architecture, high level design
       - Qualified team assembly with code/security training
       - Indepented QA individual/team
       -Independent security audit individual/team
       -Open source review board with repository
       - Product release managment/resources
       - SBOM
       -Development location and information
       
       
    2. Dependencies/artifacts recommended to be provided by the third-party supplier  for the benefit of the developer:
       
       -Third-party SBOM
       -Third-party license
       -Release notes
       -Vulnerability notifications
       -Publish updates and patches to the customer to address new vulnerabilities or weaknesses found  within the product
       
     3. Dependencies/artifacts recommended to be provided by the customer for the benefit of the supplier/developer
     
       -Requirements and criteria for success
       -Implied industry security requirements
       - Provide issues from the operations environment, take updates and patches
       - Vulnerability notifications and reporting from the users
       
       
      ============================================================================================================
      
      In principle, any artifacts created during the lifecycle of the software development process are owned
by and private to a developing organization. These organizations can determine what artifacts are
made available with potential and current users of a product with or without a Non-Disclosure
Agreement (NDA). Availability of information must take into consideration regulatory and legal
requirements, the customer requirements for the information and the risk involved by exposing
information leading to the exploitation of the product. Exceptions may include open-source
development organizations, which are more inclined to make all development information available,
to include source code. 


       
       
