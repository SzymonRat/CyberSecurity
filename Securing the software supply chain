
========================================Definitions============================================================
   
Customers (acquiring organizations) may use this guidance for assessing, and
measuring security practices relative to the software lifecycle as well as for
acquisition, deployment, and operational phases of a software supply chain.

Vendor (software supplier) is responsible for liaising between the customer and software
developer. Accordingly, vendor responsibilities include ensuring the integrity and security of
software via contractual agreements, software releases and updates, notifications, and mitigations
of vulnerabilities.

=======================================Definitions===========================================================

A supplier acts as a liaison or intermediary between the developer and a customer and as such retains
primary responsibilities for the following:

1. Maintaininf the integrity of the securely delivered sofftware

2. Validating software packages and updates

3. Mintaining awerness of known vulnerabilities

4. Accept cutomer reports of issues or newly discovered vulnerabilities  and notifing 
developers for remediations

Policies should be established and implemented that specify checks required to securly 
deliver software. These policies should be accessible and knnownby everyone who has a role in 
software development life cycle (SDLC) and should include:
   - notifing customers of vulnerabilities
   - mechanisms used for the mitigations
   - End-of-life support (EOL)
   
   
   The following mitigations can help reduce threats and risks associated with the deployment process:
   
    1. Verify if the software shipped is the same as the received
    
    2. Create fully signed images and binary code
    
    3. Ensure the secure hash to validate the binary
    
    4. Establish that communication channel is secure
    
    5. Establish a secure process for updates ad pataches
    
    
All forms of code should be protected from unauthorized access and tampering and the principle of least privileges
should be applied throught the SDLC. This is a key in ensuring that code delivered to the customers includes all
required security features and that those features are working as designed.

The following mitigrations can help reduce risks associated with the integrity of the software code:

    1. Enforce role-based-access-control with segmentation of duties and least privileges
    
    2. Identify and vet trusted architectes, developers, testers and the documentation personnel
    with the required skills necessary to complete the project
    
    3. Assign individuals to one or more design, coding or quality assurance tasks based on their
    capabilities or interests and register their privileges for the corrseponding project roles
    in a secure access control system
    
    4. Verify each assigned individual's corporate-issued development system conforms to all
    company security standards, including full disk encryption, minimum password complexity,
    patch management, antivirus and intrusion detection system
    
    5. Ensure that code repository, build and test environments have at least the same security
    protections as other critical network capabilities such as network segmentation, firewalling,
    monitoring, automated encryption and remote backups
    
    6. Ensure the use of multi-factor authentication (MFA) or continous authentication
    based on the behaviour analytics and virtual private network (VPN)
    
    7. Conduct regular reviews of the third  party software
    
    8. Establish a strong security culture in the development and operation support teams
    
    
  The following mitigations can help reduct risks assocaited with the integrity of software releases:
  
    1. Digitally signed code
    
    2. Establish and implment a procedure for key management
    
    3. Include signature validation in the list of security checks
    
    
    Organizations should have an archivial strategy that allows the organization to specify
    major and minor releases. Archived software releases can be used for disaster recovery 
    as well as for forensic investigations. By moving released software to an archived stated
    what is typically a lower cost storage area, the organization can save money and allocate 
    faster storage for more critical software projects. This process can also speed up 
    the productivity by reducing the time it takes for the employees to open files
    under development and to access the associated metadata.
    
    The following mitigations can help reduce risks assocaited with moving software to archive:
    
       1. Establishing repositoried with appropriate access control
       
       2. Ensure the code and executable are maintained
       
       3. Ensure that archived software is only in read-only mode
    
    
    
    
    
